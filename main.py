# -*- coding: utf-8 -*-
import logging
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ConversationHandler, ContextTypes
from bookings import add_booking, get_all_bookings, update_booking_status, booking_exists
import os
from dotenv import load_dotenv # type: ignore

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_USERNAME = os.getenv("ADMIN_USERNAME")
ADMIN_CHAT_IDS = [int(cid) for cid in os.getenv("ADMIN_CHAT_IDS", str(os.getenv("ADMIN_CHAT_ID", "")).strip()).split(",") if cid.strip()]
# –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —ç–∫—Å–∫—É—Ä—Å–∏–π –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
LOCATIONS = [
    "–í–µ—Ä—à–∏–Ω—ã –§–µ–æ–¥–æ—Å–∏–∏",
    "–ë–µ–ª–∞—è –°–∫–∞–ª–∞",
    "–ê—Ä–ø–∞—Ç—Å–∫–∏–µ –≤–æ–¥–æ–ø–∞–¥—ã",
    "–ú–µ–≥–∞–Ω–æ–º –∏ –º—ã—Å—ã –°—É–¥–∞–∫–∞"
]
LOCATION_TIMES = {
    "–í–µ—Ä—à–∏–Ω—ã –§–µ–æ–¥–æ—Å–∏–∏": ["09:00", "13:00", "17:00"],
    "–ë–µ–ª–∞—è –°–∫–∞–ª–∞": ["08:00", "14:00"],
    "–ê—Ä–ø–∞—Ç—Å–∫–∏–µ –≤–æ–¥–æ–ø–∞–¥—ã": ["08:00", "14:00"],
    "–ú–µ–≥–∞–Ω–æ–º –∏ –º—ã—Å—ã –°—É–¥–∞–∫–∞": ["08:00", "14:00"]
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(LOCATION, TIME, PEOPLE, CONFIRM, FINAL) = range(5)

def generate_calendar_keyboard(context=None):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∞—Ç–∞–º–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 14 –¥–Ω–µ–π, –∏—Å–∫–ª—é—á–∞—è —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –µ—Å–ª–∏ –≤—Å–µ –≤—Ä–µ–º–µ–Ω–∞ —É–∂–µ –ø—Ä–æ—à–ª–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏."""
    keyboard = []
    current_date = datetime.now()
    ru_weekdays = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ª–æ–∫–∞—Ü–∏—é, –µ—Å–ª–∏ context –ø–µ—Ä–µ–¥–∞–Ω
    location = None
    times_for_location = None
    if context and hasattr(context, 'user_data'):
        location = context.user_data.get('location')
        times_for_location = LOCATION_TIMES.get(location, None)
    for i in range(14):
        date = current_date + timedelta(days=i)
        date_str = date.strftime("%d.%m.%Y")
        day_name = ru_weekdays[date.weekday()]
        if date.date() < current_date.date():
            continue
        # –ò—Å–∫–ª—é—á–∞–µ–º "–°–µ–≥–æ–¥–Ω—è", –µ—Å–ª–∏ –≤—Å–µ –≤—Ä–µ–º–µ–Ω–∞ —É–∂–µ –ø—Ä–æ—à–ª–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏
        if i == 0 and times_for_location:
            now = current_date
            times_left = [t for t in times_for_location if datetime.strptime(t, "%H:%M").time() > now.time()]
            if not times_left:
                continue
            button_text = f"–°–µ–≥–æ–¥–Ω—è ({date_str})"
        elif i == 0:
            button_text = f"–°–µ–≥–æ–¥–Ω—è ({date_str})"
        elif i == 1:
            button_text = f"–ó–∞–≤—Ç—Ä–∞ ({date_str})"
        else:
            button_text = f"{day_name} {date_str}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"date_{date_str}")])
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    return InlineKeyboardMarkup(keyboard)

def generate_people_keyboard():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤"""
    keyboard = []
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç 1 –¥–æ 6 –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤
    for i in range(1, 7):
        keyboard.append([InlineKeyboardButton(f"{i} {'—á–µ–ª–æ–≤–µ–∫' if i == 1 else '—á–µ–ª–æ–≤–µ–∫–∞' if i < 5 else '—á–µ–ª–æ–≤–µ–∫'}", callback_data=f"people_{i}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞"
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    return InlineKeyboardMarkup(keyboard)

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–æ–≤–æ–º —Å—Ç–∞—Ä—Ç–µ
    context.user_data.clear()
    
    reply_keyboard = [["–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏—é"]]
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∂–∏–ø-—Ç—É—Ä–æ–≤. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    )
    return LOCATION

async def choose_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞—Ü–∏–π
    reply_keyboard = [[loc] for loc in LOCATIONS]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ –ª–æ–∫–∞—Ü–∏—é:",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    )
    return LOCATION

async def handle_location_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏"""
    context.user_data['location'] = update.message.text
    await update.message.reply_text(
        f"üìç –í—ã–±—Ä–∞–Ω–∞ –ª–æ–∫–∞—Ü–∏—è: {update.message.text}\n\n–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É:",
        reply_markup=generate_calendar_keyboard(context)
    )
    return TIME



async def choose_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['date'] = update.message.text
    reply_keyboard = [[t] for t in TIMES]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è:",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    )
    return PEOPLE

async def handle_date_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    query = update.callback_query
    await query.answer()
    if query.data == "cancel":
        await query.edit_message_text("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END
    if query.data.startswith("date_"):
        selected_date = query.data.replace("date_", "")
        context.user_data['date'] = selected_date
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ª–æ–∫–∞—Ü–∏—é
        location = context.user_data.get('location')
        times_for_location = LOCATION_TIMES.get(location, [])
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ –≤—Ä–µ–º–µ–Ω–∞
        from datetime import datetime
        date_obj = datetime.strptime(selected_date, "%d.%m.%Y")
        now = datetime.now()
        if date_obj.date() == now.date():
            available_times = [t for t in times_for_location if datetime.strptime(t, "%H:%M").time() > now.time()]
        else:
            available_times = times_for_location
        time_keyboard = [[InlineKeyboardButton(t, callback_data=f"time_{t}")] for t in available_times]
        time_keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
        await query.edit_message_text(
            f"üìÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {selected_date}\n\n–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è:",
            reply_markup=InlineKeyboardMarkup(time_keyboard)
        )
        return PEOPLE
    return TIME

async def choose_people(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['time'] = update.message.text
    await update.message.reply_text(
        "–ù–∞ –∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ? (–≤–≤–µ–¥–∏ —á–∏—Å–ª–æ)",
        reply_markup=ReplyKeyboardRemove()
    )
    return CONFIRM

async def handle_people_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "cancel":
        await query.edit_message_text("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END
    
    if query.data.startswith("people_"):
        selected_people = query.data.replace("people_", "")
        context.user_data['people'] = selected_people
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        booking_summary = (
            f"üìã –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
            f"üìç –õ–æ–∫–∞—Ü–∏—è: {context.user_data['location']}\n"
            f"üìÖ –î–∞—Ç–∞: {context.user_data['date']}\n"
            f"‚è∞ –í—Ä–µ–º—è: {context.user_data['time']}\n"
            f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {selected_people} {'—á–µ–ª–æ–≤–µ–∫' if selected_people == '1' else '—á–µ–ª–æ–≤–µ–∫–∞' if int(selected_people) < 5 else '—á–µ–ª–æ–≤–µ–∫'}\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ?"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirm_keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_yes")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
        ]
        
        await query.edit_message_text(
            booking_summary,
            reply_markup=InlineKeyboardMarkup(confirm_keyboard)
        )
        return FINAL
    
    return PEOPLE

async def handle_time_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "cancel":
        await query.edit_message_text("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END
    
    if query.data.startswith("time_"):
        selected_time = query.data.replace("time_", "")
        context.user_data['time'] = selected_time
        
        await query.edit_message_text(
            f"‚è∞ –í—ã–±—Ä–∞–Ω–æ –≤—Ä–µ–º—è: {selected_time}\n\n–í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤:",
            reply_markup=generate_people_keyboard()
        )
        return CONFIRM
    
    return PEOPLE

async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['people'] = update.message.text
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
    if booking_exists(
        update.message.from_user.id,
        context.user_data['location'],
        context.user_data['date'],
        context.user_data['time']
    ):
        await update.message.reply_text(
            "‚ùóÔ∏è–í—ã —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç—É —ç–∫—Å–∫—É—Ä—Å–∏—é –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è!"
        )
        return ConversationHandler.END
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    booking_data = {
        'location': context.user_data['location'],
        'date': context.user_data['date'],
        'time': context.user_data['time'],
        'people': context.user_data['people'],
        'user_id': update.message.from_user.id,
        'username': update.message.from_user.username,
        'first_name': update.message.from_user.first_name,
        'chat_id': update.message.chat_id
    }
    
    saved_booking = add_booking(booking_data)
    
    booking_info = (
        f"ID: #{saved_booking['id']}\n"
        f"–õ–æ–∫–∞—Ü–∏—è: {context.user_data['location']}\n"
        f"–î–∞—Ç–∞: {context.user_data['date']}\n"
        f"–í—Ä–µ–º—è: {context.user_data['time']}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫: {context.user_data['people']}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{update.message.from_user.username} ({update.message.from_user.first_name})"
    )
    
    await update.message.reply_text(
        f"‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #{saved_booking['id']} –ø—Ä–∏–Ω—è—Ç–æ.\n\n"
        f"üìã –î–µ—Ç–∞–ª–∏:\n{booking_info}\n\n"
        f"–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
    )
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
    admin_message = f"üöó –ù–û–í–û–ï –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï –î–ñ–ò–ü-–¢–£–†–ê #{saved_booking['id']}\n\n{booking_info}"
    
    ADMIN_CHAT_IDS = [int(cid) for cid in os.getenv("ADMIN_CHAT_IDS", str(os.getenv("ADMIN_CHAT_ID", "")).strip()).split(",") if cid.strip()]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    for admin_id in ADMIN_CHAT_IDS:
        try:
            await context.bot.send_message(chat_id=admin_id, text=admin_message)
            print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É (chat_id: {admin_id})")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            print(f"=== –ù–û–í–û–ï –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï ===")
            print(admin_message)
            print("==========================")
    
    return ConversationHandler.END

async def handle_confirm_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "cancel":
        await query.edit_message_text("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END
    
    if query.data == "confirm_yes":
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
        if booking_exists(
            query.from_user.id,
            context.user_data['location'],
            context.user_data['date'],
            context.user_data['time']
        ):
            await query.edit_message_text(
                "‚ùóÔ∏è–í—ã —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç—É —ç–∫—Å–∫—É—Ä—Å–∏—é –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è!"
            )
            return ConversationHandler.END
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        booking_data = {
            'location': context.user_data['location'],
            'date': context.user_data['date'],
            'time': context.user_data['time'],
            'people': context.user_data['people'],
            'user_id': query.from_user.id,
            'username': query.from_user.username,
            'first_name': query.from_user.first_name,
            'chat_id': query.message.chat_id
        }
        
        saved_booking = add_booking(booking_data)
        
        booking_info = (
            f"ID: #{saved_booking['id']}\n"
            f"–õ–æ–∫–∞—Ü–∏—è: {context.user_data['location']}\n"
            f"–î–∞—Ç–∞: {context.user_data['date']}\n"
            f"–í—Ä–µ–º—è: {context.user_data['time']}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫: {context.user_data['people']}\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{query.from_user.username} ({query.from_user.first_name})"
        )
        
        await query.edit_message_text(
            f"‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #{saved_booking['id']} –ø—Ä–∏–Ω—è—Ç–æ.\n\n"
            f"üìã –î–µ—Ç–∞–ª–∏:\n{booking_info}\n\n"
            f"–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
        )
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
        admin_message = f"üöó –ù–û–í–û–ï –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï –î–ñ–ò–ü-–¢–£–†–ê #{saved_booking['id']}\n\n{booking_info}"
        
        ADMIN_CHAT_IDS = [int(cid) for cid in os.getenv("ADMIN_CHAT_IDS", str(os.getenv("ADMIN_CHAT_ID", "")).strip()).split(",") if cid.strip()]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for admin_id in ADMIN_CHAT_IDS:
            try:
                await context.bot.send_message(chat_id=admin_id, text=admin_message)
                print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É (chat_id: {admin_id})")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
                print(f"=== –ù–û–í–û–ï –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï ===")
                print(admin_message)
                print("==========================")
        
        return ConversationHandler.END
    
    return CONFIRM

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    context.user_data.clear()
    await update.message.reply_text(
        '‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.', 
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

async def clear(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
    context.user_data.clear()
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä
    await update.message.reply_text(
        'üßπ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.', 
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –≤–Ω–µ ConversationHandler"""
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–æ–≤–æ–º —Å—Ç–∞—Ä—Ç–µ
    context.user_data.clear()
    reply_keyboard = [["–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏—é"]]
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä start
    if hasattr(context, 'args') and context.args and context.args[0] == "from_channel":
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
        )
        return LOCATION
    else:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∂–∏–ø-—Ç—É—Ä–æ–≤. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
        )
        return LOCATION

async def get_my_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.message.from_user.id
    chat_id = update.message.chat_id
    username = update.message.from_user.username
    first_name = update.message.from_user.first_name
    chat_type = update.message.chat.type
    
    message = f"üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:\n\n"
    message += f"Chat Type: {chat_type}\n"
    message += f"Chat ID: {chat_id}\n"
    message += f"Chat Title: {update.message.chat.title or 'N/A'}\n"
    message += f"Username: @{username or 'N/A'}\n"
    message += f"–ò–º—è: {first_name or 'N/A'}\n\n"
    message += f"üí° –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π Chat ID: {chat_id}"
    
    # –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    print(f"=== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ß–ê–¢–ï ===")
    print(f"Chat Type: {chat_type}")
    print(f"Chat ID: {chat_id}")
    print(f"Chat Title: {update.message.chat.title or 'N/A'}")
    print(f"Username: @{username or 'N/A'}")
    print(f"–ò–º—è: {first_name or 'N/A'}")
    print("==========================")
    
    await update.message.reply_text(message)

async def show_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
    if update.message.chat_id != ADMIN_CHAT_IDS[0]:  # –¢–≤–æ–π chat_id
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    bookings = get_all_bookings()
    
    if not bookings:
        await update.message.reply_text("üìã –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    
    message = "üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:\n\n"
    
    for booking in bookings:
        status_emoji = "üÜï" if booking.get('status') == 'new' else "‚úÖ" if booking.get('status') == 'confirmed' else "‚ùå"
        message += f"{status_emoji} #{booking['id']} - {booking['location']}\n"
        message += f"üìÖ {booking['date']} –≤ {booking['time']}\n"
        message += f"üë• {booking['people']} —á–µ–ª. | @{booking['username']}\n"
        message += f"‚è∞ {booking['timestamp'][:16].replace('T', ' ')}\n\n"
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    if len(message) > 4096:
        parts = [message[i:i+4096] for i in range(0, len(message), 4096)]
        for part in parts:
            await update.message.reply_text(part)
    else:
        await update.message.reply_text(message)

async def channel_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ"""
    chat = update.message.chat
    
    message = f"üì¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ:\n\n"
    message += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}\n"
    message += f"–¢–∏–ø: {chat.type}\n"
    message += f"Chat ID: {chat.id}\n"
    message += f"Username: @{chat.username or '–ù–µ—Ç'}\n"
    message += f"–û–ø–∏—Å–∞–Ω–∏–µ: {chat.description or '–ù–µ—Ç'}\n"
    message += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {chat.member_count or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n"
    message += f"üí° Chat ID –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {chat.id}"
    
    # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
    print(f"=== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–ê–ù–ê–õ–ï ===")
    print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}")
    print(f"–¢–∏–ø: {chat.type}")
    print(f"Chat ID: {chat.id}")
    print(f"Username: @{chat.username or '–ù–µ—Ç'}")
    print("============================")
    
    await update.message.reply_text(message)

async def get_channel_info_direct(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä—è–º–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ —á–µ—Ä–µ–∑ API"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ —á–µ—Ä–µ–∑ API
        chat = await context.bot.get_chat(chat_id=update.message.chat_id)
        
        message = f"üì¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ (—á–µ—Ä–µ–∑ API):\n\n"
        message += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}\n"
        message += f"–¢–∏–ø: {chat.type}\n"
        message += f"Chat ID: {chat.id}\n"
        message += f"Username: @{chat.username or '–ù–µ—Ç'}\n"
        message += f"–û–ø–∏—Å–∞–Ω–∏–µ: {chat.description or '–ù–µ—Ç'}\n"
        message += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {chat.member_count or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n"
        message += f"üí° Chat ID –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {chat.id}"
        
        # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
        print(f"=== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–ê–ù–ê–õ–ï (API) ===")
        print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}")
        print(f"–¢–∏–ø: {chat.type}")
        print(f"Chat ID: {chat.id}")
        print(f"Username: @{chat.username or '–ù–µ—Ç'}")
        print("==================================")
        
        await update.message.reply_text(message)
        
    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {e}"
        print(f"–û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text(error_message)

# –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

def main():
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    application.add_handler(CommandHandler('get_my_id', get_my_id))
    application.add_handler(CommandHandler('bookings', show_bookings))
    application.add_handler(CommandHandler('clear', clear))
    application.add_handler(CommandHandler('channel_info', channel_info))
    application.add_handler(CommandHandler('get_channel_info', get_channel_info_direct))
    application.add_handler(CommandHandler('start', start_command))

    # ConversationHandler —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏—é$'), choose_location)],
        states={
            LOCATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_location_selection)],
            TIME: [CallbackQueryHandler(handle_date_selection)],
            PEOPLE: [CallbackQueryHandler(handle_time_selection)],
            CONFIRM: [CallbackQueryHandler(handle_people_selection)],
            FINAL: [CallbackQueryHandler(handle_confirm_booking)],
        },
        fallbacks=[CommandHandler('cancel', cancel), CommandHandler('clear', clear)],
        allow_reentry=True
    )
    application.add_handler(conv_handler)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    application.run_polling()

if __name__ == '__main__':
    main() 